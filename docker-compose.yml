version: '3'  # Docker Composeのバージョン指定です。バージョン3は広範囲にサポートされています。

services:
  db:
    image: mysql:8.0.32
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: myapp_development
      MYSQL_USER: user
      MYSQL_PASSWORD: password
      TZ: Asia/Tokyo
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
  rails:
    build:
      context: ./rails
    command:  bash -c "bundle exec rails s -b '0.0.0.0'"
    volumes:
      - ./rails:/myapp
    ports:
      - 3000:3000
    depends_on:
      - db
    tty: true
    stdin_open: true
    environment:
      - TZ=Asia/Tokyo
      - NEXT_PUBLIC_BASE_URL=http://localhost:8000
  
  # SolidQueueワーカーコンテナ
  worker:
    build:
      context: ./rails
    command: bundle exec rake solid_queue:start
    volumes:
      - ./rails:/myapp
    depends_on:
      - db
      - rails
    environment:
      - RAILS_ENV=development
      - TZ=Asia/Tokyo
      - NEXT_PUBLIC_BASE_URL=http://localhost:8000
    # worker専用のentrypointを使用
    entrypoint: ["/myapp/entrypoint.worker.sh"]
  next:
    build:
      context: ./next
      dockerfile: Dockerfile
    command: npm run dev
    tty: true  # コンテナがフォアグラウンドで走り続けるようにTTYを割り当てます。
    stdin_open: true  # コンテナの標準入力をオープンにします。これにより、コンテナ内での対話型シェルが可能になります。
    volumes:
      - ./next:/app  # ホストマシンのカレントディレクトリ下の `next` フォルダをコンテナ内の `/app` にマウントします。
      - next_node_modules:/app/node_modules  # 名前付きボリューム `next_node_modules` でnode_modulesを管理
      - next_build:/app/.next  # 名前付きボリューム `next_build` で.nextディレクトリを管理
    environment:
      TZ: Asia/Tokyo
    ports:
      - "8000:3000"  # ホストのポート8000をコンテナのポート3000にフォワードします。Next.jsのデフォルトポート3000が外部の8000ポートでアクセス可能になります。

volumes:
  mysql_data:
  next_node_modules:
  next_build:
